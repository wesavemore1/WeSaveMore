/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.partner.info.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.partner.info.model.Partner;
import com.liferay.partner.info.model.PartnerModel;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Partner service. Represents a row in the &quot;Partner_Partner&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PartnerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PartnerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PartnerImpl
 * @generated
 */
public class PartnerModelImpl
	extends BaseModelImpl<Partner> implements PartnerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a partner model instance should use the <code>Partner</code> interface instead.
	 */
	public static final String TABLE_NAME = "Partner_Partner";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"partnetId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"partnername", Types.VARCHAR}, {"licensename", Types.VARCHAR},
		{"countryId", Types.BIGINT}, {"companyemail", Types.VARCHAR},
		{"companyphone", Types.VARCHAR}, {"companyPO", Types.VARCHAR},
		{"businesscategories", Types.VARCHAR}, {"address", Types.VARCHAR},
		{"signatory", Types.VARCHAR}, {"signatoryphone", Types.VARCHAR},
		{"signatoryemail", Types.VARCHAR}, {"partnerStatus", Types.VARCHAR},
		{"field1", Types.VARCHAR}, {"field2", Types.BOOLEAN},
		{"field3", Types.INTEGER}, {"folderId", Types.BIGINT},
		{"field5", Types.VARCHAR}, {"regionId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("partnetId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("partnername", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("licensename", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("countryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyemail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyphone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyPO", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("businesscategories", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signatory", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signatoryphone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signatoryemail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("partnerStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("field1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("field2", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("field3", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("folderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("field5", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("regionId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Partner_Partner (uuid_ VARCHAR(75) null,partnetId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,partnername VARCHAR(75) null,licensename VARCHAR(75) null,countryId LONG,companyemail VARCHAR(75) null,companyphone VARCHAR(75) null,companyPO VARCHAR(75) null,businesscategories VARCHAR(75) null,address VARCHAR(75) null,signatory VARCHAR(75) null,signatoryphone VARCHAR(75) null,signatoryemail VARCHAR(75) null,partnerStatus VARCHAR(75) null,field1 VARCHAR(75) null,field2 BOOLEAN,field3 INTEGER,folderId LONG,field5 VARCHAR(75) null,regionId LONG)";

	public static final String TABLE_SQL_DROP = "drop table Partner_Partner";

	public static final String ORDER_BY_JPQL = " ORDER BY partner.field1 ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Partner_Partner.field1 ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long FIELD2_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)
	 */
	@Deprecated
	public static final long FIELD1_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public PartnerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _partnetId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPartnetId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _partnetId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Partner.class;
	}

	@Override
	public String getModelClassName() {
		return Partner.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Partner, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Partner, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Partner, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Partner)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Partner, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Partner, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Partner)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Partner, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Partner, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Partner>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Partner.class.getClassLoader(), Partner.class, ModelWrapper.class);

		try {
			Constructor<Partner> constructor =
				(Constructor<Partner>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Partner, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Partner, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Partner, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Partner, Object>>();
		Map<String, BiConsumer<Partner, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Partner, ?>>();

		attributeGetterFunctions.put("uuid", Partner::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Partner, String>)Partner::setUuid);
		attributeGetterFunctions.put("partnetId", Partner::getPartnetId);
		attributeSetterBiConsumers.put(
			"partnetId", (BiConsumer<Partner, Long>)Partner::setPartnetId);
		attributeGetterFunctions.put("groupId", Partner::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Partner, Long>)Partner::setGroupId);
		attributeGetterFunctions.put("companyId", Partner::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Partner, Long>)Partner::setCompanyId);
		attributeGetterFunctions.put("userId", Partner::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Partner, Long>)Partner::setUserId);
		attributeGetterFunctions.put("userName", Partner::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Partner, String>)Partner::setUserName);
		attributeGetterFunctions.put("createDate", Partner::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Partner, Date>)Partner::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Partner::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Partner, Date>)Partner::setModifiedDate);
		attributeGetterFunctions.put("partnername", Partner::getPartnername);
		attributeSetterBiConsumers.put(
			"partnername",
			(BiConsumer<Partner, String>)Partner::setPartnername);
		attributeGetterFunctions.put("licensename", Partner::getLicensename);
		attributeSetterBiConsumers.put(
			"licensename",
			(BiConsumer<Partner, String>)Partner::setLicensename);
		attributeGetterFunctions.put("countryId", Partner::getCountryId);
		attributeSetterBiConsumers.put(
			"countryId", (BiConsumer<Partner, Long>)Partner::setCountryId);
		attributeGetterFunctions.put("companyemail", Partner::getCompanyemail);
		attributeSetterBiConsumers.put(
			"companyemail",
			(BiConsumer<Partner, String>)Partner::setCompanyemail);
		attributeGetterFunctions.put("companyphone", Partner::getCompanyphone);
		attributeSetterBiConsumers.put(
			"companyphone",
			(BiConsumer<Partner, String>)Partner::setCompanyphone);
		attributeGetterFunctions.put("companyPO", Partner::getCompanyPO);
		attributeSetterBiConsumers.put(
			"companyPO", (BiConsumer<Partner, String>)Partner::setCompanyPO);
		attributeGetterFunctions.put(
			"businesscategories", Partner::getBusinesscategories);
		attributeSetterBiConsumers.put(
			"businesscategories",
			(BiConsumer<Partner, String>)Partner::setBusinesscategories);
		attributeGetterFunctions.put("address", Partner::getAddress);
		attributeSetterBiConsumers.put(
			"address", (BiConsumer<Partner, String>)Partner::setAddress);
		attributeGetterFunctions.put("signatory", Partner::getSignatory);
		attributeSetterBiConsumers.put(
			"signatory", (BiConsumer<Partner, String>)Partner::setSignatory);
		attributeGetterFunctions.put(
			"signatoryphone", Partner::getSignatoryphone);
		attributeSetterBiConsumers.put(
			"signatoryphone",
			(BiConsumer<Partner, String>)Partner::setSignatoryphone);
		attributeGetterFunctions.put(
			"signatoryemail", Partner::getSignatoryemail);
		attributeSetterBiConsumers.put(
			"signatoryemail",
			(BiConsumer<Partner, String>)Partner::setSignatoryemail);
		attributeGetterFunctions.put(
			"partnerStatus", Partner::getPartnerStatus);
		attributeSetterBiConsumers.put(
			"partnerStatus",
			(BiConsumer<Partner, String>)Partner::setPartnerStatus);
		attributeGetterFunctions.put("field1", Partner::getField1);
		attributeSetterBiConsumers.put(
			"field1", (BiConsumer<Partner, String>)Partner::setField1);
		attributeGetterFunctions.put("field2", Partner::getField2);
		attributeSetterBiConsumers.put(
			"field2", (BiConsumer<Partner, Boolean>)Partner::setField2);
		attributeGetterFunctions.put("field3", Partner::getField3);
		attributeSetterBiConsumers.put(
			"field3", (BiConsumer<Partner, Integer>)Partner::setField3);
		attributeGetterFunctions.put("folderId", Partner::getFolderId);
		attributeSetterBiConsumers.put(
			"folderId", (BiConsumer<Partner, Long>)Partner::setFolderId);
		attributeGetterFunctions.put("field5", Partner::getField5);
		attributeSetterBiConsumers.put(
			"field5", (BiConsumer<Partner, String>)Partner::setField5);
		attributeGetterFunctions.put("regionId", Partner::getRegionId);
		attributeSetterBiConsumers.put(
			"regionId", (BiConsumer<Partner, Long>)Partner::setRegionId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getPartnetId() {
		return _partnetId;
	}

	@Override
	public void setPartnetId(long partnetId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_partnetId = partnetId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getPartnername() {
		if (_partnername == null) {
			return "";
		}
		else {
			return _partnername;
		}
	}

	@Override
	public void setPartnername(String partnername) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_partnername = partnername;
	}

	@Override
	public String getLicensename() {
		if (_licensename == null) {
			return "";
		}
		else {
			return _licensename;
		}
	}

	@Override
	public void setLicensename(String licensename) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_licensename = licensename;
	}

	@Override
	public long getCountryId() {
		return _countryId;
	}

	@Override
	public void setCountryId(long countryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_countryId = countryId;
	}

	@Override
	public String getCompanyemail() {
		if (_companyemail == null) {
			return "";
		}
		else {
			return _companyemail;
		}
	}

	@Override
	public void setCompanyemail(String companyemail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyemail = companyemail;
	}

	@Override
	public String getCompanyphone() {
		if (_companyphone == null) {
			return "";
		}
		else {
			return _companyphone;
		}
	}

	@Override
	public void setCompanyphone(String companyphone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyphone = companyphone;
	}

	@Override
	public String getCompanyPO() {
		if (_companyPO == null) {
			return "";
		}
		else {
			return _companyPO;
		}
	}

	@Override
	public void setCompanyPO(String companyPO) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyPO = companyPO;
	}

	@Override
	public String getBusinesscategories() {
		if (_businesscategories == null) {
			return "";
		}
		else {
			return _businesscategories;
		}
	}

	@Override
	public void setBusinesscategories(String businesscategories) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_businesscategories = businesscategories;
	}

	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address = address;
	}

	@Override
	public String getSignatory() {
		if (_signatory == null) {
			return "";
		}
		else {
			return _signatory;
		}
	}

	@Override
	public void setSignatory(String signatory) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_signatory = signatory;
	}

	@Override
	public String getSignatoryphone() {
		if (_signatoryphone == null) {
			return "";
		}
		else {
			return _signatoryphone;
		}
	}

	@Override
	public void setSignatoryphone(String signatoryphone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_signatoryphone = signatoryphone;
	}

	@Override
	public String getSignatoryemail() {
		if (_signatoryemail == null) {
			return "";
		}
		else {
			return _signatoryemail;
		}
	}

	@Override
	public void setSignatoryemail(String signatoryemail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_signatoryemail = signatoryemail;
	}

	@Override
	public String getPartnerStatus() {
		if (_partnerStatus == null) {
			return "";
		}
		else {
			return _partnerStatus;
		}
	}

	@Override
	public void setPartnerStatus(String partnerStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_partnerStatus = partnerStatus;
	}

	@Override
	public String getField1() {
		if (_field1 == null) {
			return "";
		}
		else {
			return _field1;
		}
	}

	@Override
	public void setField1(String field1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field1 = field1;
	}

	@Override
	public boolean getField2() {
		return _field2;
	}

	@Override
	public boolean isField2() {
		return _field2;
	}

	@Override
	public void setField2(boolean field2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field2 = field2;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalField2() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("field2"));
	}

	@Override
	public int getField3() {
		return _field3;
	}

	@Override
	public void setField3(int field3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field3 = field3;
	}

	@Override
	public long getFolderId() {
		return _folderId;
	}

	@Override
	public void setFolderId(long folderId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_folderId = folderId;
	}

	@Override
	public String getField5() {
		if (_field5 == null) {
			return "";
		}
		else {
			return _field5;
		}
	}

	@Override
	public void setField5(String field5) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field5 = field5;
	}

	@Override
	public long getRegionId() {
		return _regionId;
	}

	@Override
	public void setRegionId(long regionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_regionId = regionId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Partner.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Partner.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Partner toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Partner>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PartnerImpl partnerImpl = new PartnerImpl();

		partnerImpl.setUuid(getUuid());
		partnerImpl.setPartnetId(getPartnetId());
		partnerImpl.setGroupId(getGroupId());
		partnerImpl.setCompanyId(getCompanyId());
		partnerImpl.setUserId(getUserId());
		partnerImpl.setUserName(getUserName());
		partnerImpl.setCreateDate(getCreateDate());
		partnerImpl.setModifiedDate(getModifiedDate());
		partnerImpl.setPartnername(getPartnername());
		partnerImpl.setLicensename(getLicensename());
		partnerImpl.setCountryId(getCountryId());
		partnerImpl.setCompanyemail(getCompanyemail());
		partnerImpl.setCompanyphone(getCompanyphone());
		partnerImpl.setCompanyPO(getCompanyPO());
		partnerImpl.setBusinesscategories(getBusinesscategories());
		partnerImpl.setAddress(getAddress());
		partnerImpl.setSignatory(getSignatory());
		partnerImpl.setSignatoryphone(getSignatoryphone());
		partnerImpl.setSignatoryemail(getSignatoryemail());
		partnerImpl.setPartnerStatus(getPartnerStatus());
		partnerImpl.setField1(getField1());
		partnerImpl.setField2(isField2());
		partnerImpl.setField3(getField3());
		partnerImpl.setFolderId(getFolderId());
		partnerImpl.setField5(getField5());
		partnerImpl.setRegionId(getRegionId());

		partnerImpl.resetOriginalValues();

		return partnerImpl;
	}

	@Override
	public int compareTo(Partner partner) {
		int value = 0;

		value = getField1().compareTo(partner.getField1());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Partner)) {
			return false;
		}

		Partner partner = (Partner)object;

		long primaryKey = partner.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Partner> toCacheModel() {
		PartnerCacheModel partnerCacheModel = new PartnerCacheModel();

		partnerCacheModel.uuid = getUuid();

		String uuid = partnerCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			partnerCacheModel.uuid = null;
		}

		partnerCacheModel.partnetId = getPartnetId();

		partnerCacheModel.groupId = getGroupId();

		partnerCacheModel.companyId = getCompanyId();

		partnerCacheModel.userId = getUserId();

		partnerCacheModel.userName = getUserName();

		String userName = partnerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			partnerCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			partnerCacheModel.createDate = createDate.getTime();
		}
		else {
			partnerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			partnerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			partnerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		partnerCacheModel.partnername = getPartnername();

		String partnername = partnerCacheModel.partnername;

		if ((partnername != null) && (partnername.length() == 0)) {
			partnerCacheModel.partnername = null;
		}

		partnerCacheModel.licensename = getLicensename();

		String licensename = partnerCacheModel.licensename;

		if ((licensename != null) && (licensename.length() == 0)) {
			partnerCacheModel.licensename = null;
		}

		partnerCacheModel.countryId = getCountryId();

		partnerCacheModel.companyemail = getCompanyemail();

		String companyemail = partnerCacheModel.companyemail;

		if ((companyemail != null) && (companyemail.length() == 0)) {
			partnerCacheModel.companyemail = null;
		}

		partnerCacheModel.companyphone = getCompanyphone();

		String companyphone = partnerCacheModel.companyphone;

		if ((companyphone != null) && (companyphone.length() == 0)) {
			partnerCacheModel.companyphone = null;
		}

		partnerCacheModel.companyPO = getCompanyPO();

		String companyPO = partnerCacheModel.companyPO;

		if ((companyPO != null) && (companyPO.length() == 0)) {
			partnerCacheModel.companyPO = null;
		}

		partnerCacheModel.businesscategories = getBusinesscategories();

		String businesscategories = partnerCacheModel.businesscategories;

		if ((businesscategories != null) &&
			(businesscategories.length() == 0)) {

			partnerCacheModel.businesscategories = null;
		}

		partnerCacheModel.address = getAddress();

		String address = partnerCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			partnerCacheModel.address = null;
		}

		partnerCacheModel.signatory = getSignatory();

		String signatory = partnerCacheModel.signatory;

		if ((signatory != null) && (signatory.length() == 0)) {
			partnerCacheModel.signatory = null;
		}

		partnerCacheModel.signatoryphone = getSignatoryphone();

		String signatoryphone = partnerCacheModel.signatoryphone;

		if ((signatoryphone != null) && (signatoryphone.length() == 0)) {
			partnerCacheModel.signatoryphone = null;
		}

		partnerCacheModel.signatoryemail = getSignatoryemail();

		String signatoryemail = partnerCacheModel.signatoryemail;

		if ((signatoryemail != null) && (signatoryemail.length() == 0)) {
			partnerCacheModel.signatoryemail = null;
		}

		partnerCacheModel.partnerStatus = getPartnerStatus();

		String partnerStatus = partnerCacheModel.partnerStatus;

		if ((partnerStatus != null) && (partnerStatus.length() == 0)) {
			partnerCacheModel.partnerStatus = null;
		}

		partnerCacheModel.field1 = getField1();

		String field1 = partnerCacheModel.field1;

		if ((field1 != null) && (field1.length() == 0)) {
			partnerCacheModel.field1 = null;
		}

		partnerCacheModel.field2 = isField2();

		partnerCacheModel.field3 = getField3();

		partnerCacheModel.folderId = getFolderId();

		partnerCacheModel.field5 = getField5();

		String field5 = partnerCacheModel.field5;

		if ((field5 != null) && (field5.length() == 0)) {
			partnerCacheModel.field5 = null;
		}

		partnerCacheModel.regionId = getRegionId();

		return partnerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Partner, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Partner, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Partner, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Partner)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Partner, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Partner, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Partner, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Partner)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Partner>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _partnetId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _partnername;
	private String _licensename;
	private long _countryId;
	private String _companyemail;
	private String _companyphone;
	private String _companyPO;
	private String _businesscategories;
	private String _address;
	private String _signatory;
	private String _signatoryphone;
	private String _signatoryemail;
	private String _partnerStatus;
	private String _field1;
	private boolean _field2;
	private int _field3;
	private long _folderId;
	private String _field5;
	private long _regionId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Partner, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Partner)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("partnetId", _partnetId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("partnername", _partnername);
		_columnOriginalValues.put("licensename", _licensename);
		_columnOriginalValues.put("countryId", _countryId);
		_columnOriginalValues.put("companyemail", _companyemail);
		_columnOriginalValues.put("companyphone", _companyphone);
		_columnOriginalValues.put("companyPO", _companyPO);
		_columnOriginalValues.put("businesscategories", _businesscategories);
		_columnOriginalValues.put("address", _address);
		_columnOriginalValues.put("signatory", _signatory);
		_columnOriginalValues.put("signatoryphone", _signatoryphone);
		_columnOriginalValues.put("signatoryemail", _signatoryemail);
		_columnOriginalValues.put("partnerStatus", _partnerStatus);
		_columnOriginalValues.put("field1", _field1);
		_columnOriginalValues.put("field2", _field2);
		_columnOriginalValues.put("field3", _field3);
		_columnOriginalValues.put("folderId", _folderId);
		_columnOriginalValues.put("field5", _field5);
		_columnOriginalValues.put("regionId", _regionId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("partnetId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("partnername", 256L);

		columnBitmasks.put("licensename", 512L);

		columnBitmasks.put("countryId", 1024L);

		columnBitmasks.put("companyemail", 2048L);

		columnBitmasks.put("companyphone", 4096L);

		columnBitmasks.put("companyPO", 8192L);

		columnBitmasks.put("businesscategories", 16384L);

		columnBitmasks.put("address", 32768L);

		columnBitmasks.put("signatory", 65536L);

		columnBitmasks.put("signatoryphone", 131072L);

		columnBitmasks.put("signatoryemail", 262144L);

		columnBitmasks.put("partnerStatus", 524288L);

		columnBitmasks.put("field1", 1048576L);

		columnBitmasks.put("field2", 2097152L);

		columnBitmasks.put("field3", 4194304L);

		columnBitmasks.put("folderId", 8388608L);

		columnBitmasks.put("field5", 16777216L);

		columnBitmasks.put("regionId", 33554432L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Partner _escapedModel;

}